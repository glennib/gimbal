syms m1 m2 m3 theta1 theta2 theta3 lmx1 lmx2 lmx3 lmy1 lmy2 ... 
    lmy3 lmz1 lmz2 lmz3 dtheta1 dtheta2 dtheta3 I1z I1y I1x ...
    I2z I2y I2x I3z I3y I3x

q1 = theta1;
q2 = theta2;
q3 = theta3;

dq1 = dtheta1;
dq2 = dtheta2;
dq3 = dtheta3;

% Gravity

g1 = 0;
g2 = m2 * (-0.981e1 * sin(q2) * lmx2 - 0.981e1 * cos(q2) * lmz2) + m3 * (-0.981e1 * sin(q2) * cos(q3) * lmx3 + 0.981e1 * sin(q2) * sin(q3) * lmy3 - 0.981e1 * cos(q2) * lmz3);
g3 = m3 * (-0.981e1 * cos(q2) * sin(q3) * lmx3 - 0.981e1 * cos(q2) * cos(q3) * lmy3);

G = [g1; g2; g3];

% Inertia

m11 = 0.2e1 * cos(q2) ^ 2 * cos(q3) * sin(q3) * lmx3 * lmy3 * m3 + 0.2e1 * cos(q2) * cos(q3) * sin(q2) * lmx3 * lmz3 * m3 - 0.2e1 * cos(q2) * sin(q3) * sin(q2) * lmy3 * lmz3 * m3 + lmx2 ^ 2 * m2 - cos(q2) ^ 2 * cos(q3) ^ 2 * lmx3 ^ 2 * m3 + cos(q2) ^ 2 * cos(q3) ^ 2 * lmy3 ^ 2 * m3 + lmy3 ^ 2 * m3 + lmx3 ^ 2 * m3 - I2z * cos(q2) ^ 2 + cos(q2) ^ 2 * I3y - I3z * cos(q2) ^ 2 + I3z + cos(q2) ^ 2 * cos(q3) ^ 2 * I3x + I1y + cos(q2) ^ 2 * I2x + I2z + 0.2e1 * cos(q2) * sin(q2) * lmx2 * lmz2 * m2 + lmx1 ^ 2 * m1 + lmy2 ^ 2 * m2 + lmz1 ^ 2 * m1 - I3y * cos(q2) ^ 2 * cos(q3) ^ 2 - cos(q2) ^ 2 * lmx2 ^ 2 * m2 - cos(q2) ^ 2 * lmy3 ^ 2 * m3 + cos(q2) ^ 2 * lmz2 ^ 2 * m2 + cos(q2) ^ 2 * lmz3 ^ 2 * m3;
m12 = 0.2e1 * cos(q2) * cos(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q2) * cos(q3) * sin(q3) * lmx3 ^ 2 * m3 - cos(q2) * cos(q3) * sin(q3) * lmy3 ^ 2 * m3 - cos(q3) * sin(q2) * lmy3 * lmz3 * m3 - sin(q3) * sin(q2) * lmx3 * lmz3 * m3 - I3x * cos(q2) * cos(q3) * sin(q3) + I3y * cos(q2) * cos(q3) * sin(q3) + cos(q2) * lmx2 * lmy2 * m2 - cos(q2) * lmx3 * lmy3 * m3 - sin(q2) * lmy2 * lmz2 * m2;
m13 = -cos(q2) * cos(q3) * lmx3 * lmz3 * m3 + cos(q2) * sin(q3) * lmy3 * lmz3 * m3 - sin(q2) * lmx3 ^ 2 * m3 - sin(q2) * lmy3 ^ 2 * m3 - I3z * sin(q2);
m21 = 0.2e1 * cos(q2) * cos(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q2) * cos(q3) * sin(q3) * lmx3 ^ 2 * m3 - cos(q2) * cos(q3) * sin(q3) * lmy3 ^ 2 * m3 - cos(q3) * sin(q2) * lmy3 * lmz3 * m3 - sin(q3) * sin(q2) * lmx3 * lmz3 * m3 - I3x * cos(q2) * cos(q3) * sin(q3) + I3y * cos(q2) * cos(q3) * sin(q3) + cos(q2) * lmx2 * lmy2 * m2 - cos(q2) * lmx3 * lmy3 * m3 - sin(q2) * lmy2 * lmz2 * m2;
m22 = cos(q3) ^ 2 * lmx3 ^ 2 * m3 - cos(q3) ^ 2 * lmy3 ^ 2 * m3 - 0.2e1 * cos(q3) * sin(q3) * lmx3 * lmy3 * m3 - I3x * cos(q3) ^ 2 + I3y * cos(q3) ^ 2 + lmx2 ^ 2 * m2 + lmy3 ^ 2 * m3 + lmz2 ^ 2 * m2 + lmz3 ^ 2 * m3 + I2y + I3x;
m23 = lmz3 * m3 * (cos(q3) * lmy3 + sin(q3) * lmx3);
m31 = -cos(q2) * cos(q3) * lmx3 * lmz3 * m3 + cos(q2) * sin(q3) * lmy3 * lmz3 * m3 - sin(q2) * lmx3 ^ 2 * m3 - sin(q2) * lmy3 ^ 2 * m3 - I3z * sin(q2);
m32 = lmz3 * m3 * (cos(q3) * lmy3 + sin(q3) * lmx3);
m33 = lmx3 ^ 2 * m3 + lmy3 ^ 2 * m3 + I3z;

M = [m11, m12, m13; m21, m22, m23; m31, m32, m33];

% Coreolis

c11 = (-cos(q2) ^ 2 * sin(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q2) ^ 2 * cos(q3) ^ 2 * lmx3 * lmy3 * m3 - cos(q2) * sin(q3) * sin(q2) * lmx3 * lmz3 * m3 - cos(q2) * cos(q3) * sin(q2) * lmy3 * lmz3 * m3 + cos(q2) ^ 2 * cos(q3) * lmx3 ^ 2 * m3 * sin(q3) - cos(q2) ^ 2 * cos(q3) * lmy3 ^ 2 * m3 * sin(q3) - cos(q2) ^ 2 * cos(q3) * I3x * sin(q3) + I3y * cos(q2) ^ 2 * cos(q3) * sin(q3)) * dq3 + (-0.2e1 * cos(q2) * cos(q3) * sin(q3) * lmx3 * lmy3 * m3 * sin(q2) - sin(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 + cos(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 + sin(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 - cos(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 * sin(q2) - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 * sin(q2) + I2z * cos(q2) * sin(q2) - cos(q2) * I3y * sin(q2) + I3z * cos(q2) * sin(q2) - cos(q2) * cos(q3) ^ 2 * I3x * sin(q2) - cos(q2) * I2x * sin(q2) - sin(q2) ^ 2 * lmx2 * lmz2 * m2 + cos(q2) ^ 2 * lmx2 * lmz2 * m2 + I3y * cos(q2) * cos(q3) ^ 2 * sin(q2) + cos(q2) * lmx2 ^ 2 * m2 * sin(q2) + cos(q2) * lmy3 ^ 2 * m3 * sin(q2) - cos(q2) * lmz2 ^ 2 * m2 * sin(q2) - cos(q2) * lmz3 ^ 2 * m3 * sin(q2)) * dq2;
c12 = (-0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) - cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1 - cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 - I3z * cos(q2) / 0.2e1) * dq3 + (-0.2e1 * sin(q2) * cos(q3) ^ 2 * lmx3 * lmy3 * m3 - sin(q2) * cos(q3) * sin(q3) * lmx3 ^ 2 * m3 + sin(q2) * cos(q3) * sin(q3) * lmy3 ^ 2 * m3 - cos(q3) * cos(q2) * lmy3 * lmz3 * m3 - sin(q3) * cos(q2) * lmx3 * lmz3 * m3 + I3x * sin(q2) * cos(q3) * sin(q3) - I3y * sin(q2) * cos(q3) * sin(q3) - sin(q2) * lmx2 * lmy2 * m2 + sin(q2) * lmx3 * lmy3 * m3 - cos(q2) * lmy2 * lmz2 * m2) * dq2 + (-0.2e1 * cos(q2) * cos(q3) * sin(q3) * lmx3 * lmy3 * m3 * sin(q2) - sin(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 + cos(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 + sin(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 - cos(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 * sin(q2) - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 * sin(q2) + I2z * cos(q2) * sin(q2) - cos(q2) * I3y * sin(q2) + I3z * cos(q2) * sin(q2) - cos(q2) * cos(q3) ^ 2 * I3x * sin(q2) - cos(q2) * I2x * sin(q2) - sin(q2) ^ 2 * lmx2 * lmz2 * m2 + cos(q2) ^ 2 * lmx2 * lmz2 * m2 + I3y * cos(q2) * cos(q3) ^ 2 * sin(q2) + cos(q2) * lmx2 ^ 2 * m2 * sin(q2) + cos(q2) * lmy3 ^ 2 * m3 * sin(q2) - cos(q2) * lmz2 ^ 2 * m2 * sin(q2) - cos(q2) * lmz3 ^ 2 * m3 * sin(q2)) * dq1;
c13 = (sin(q3) * cos(q2) * lmx3 * lmz3 * m3 + cos(q3) * cos(q2) * lmy3 * lmz3 * m3) * dq3 + (-0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) - cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1 - cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 - I3z * cos(q2) / 0.2e1) * dq2 + (-cos(q2) ^ 2 * sin(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q2) ^ 2 * cos(q3) ^ 2 * lmx3 * lmy3 * m3 - cos(q2) * sin(q3) * sin(q2) * lmx3 * lmz3 * m3 - cos(q2) * cos(q3) * sin(q2) * lmy3 * lmz3 * m3 + cos(q2) ^ 2 * cos(q3) * lmx3 ^ 2 * m3 * sin(q3) - cos(q2) ^ 2 * cos(q3) * lmy3 ^ 2 * m3 * sin(q3) - cos(q2) ^ 2 * cos(q3) * I3x * sin(q3) + I3y * cos(q2) ^ 2 * cos(q3) * sin(q3)) * dq1;
c21 = (-0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) - cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + sin(q3) * sin(q2) * lmy3 * lmz3 * m3 - cos(q3) * sin(q2) * lmx3 * lmz3 * m3 + I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1 + cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 + I3z * cos(q2) / 0.2e1) * dq3 + (0.2e1 * cos(q2) * cos(q3) * sin(q3) * lmx3 * lmy3 * m3 * sin(q2) + sin(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 - cos(q2) ^ 2 * cos(q3) * lmx3 * lmz3 * m3 - sin(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 + cos(q2) ^ 2 * sin(q3) * lmy3 * lmz3 * m3 - cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 * sin(q2) + cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 * sin(q2) - I2z * cos(q2) * sin(q2) + cos(q2) * I3y * sin(q2) - I3z * cos(q2) * sin(q2) + cos(q2) * cos(q3) ^ 2 * I3x * sin(q2) + cos(q2) * I2x * sin(q2) + sin(q2) ^ 2 * lmx2 * lmz2 * m2 - cos(q2) ^ 2 * lmx2 * lmz2 * m2 - I3y * cos(q2) * cos(q3) ^ 2 * sin(q2) - cos(q2) * lmx2 ^ 2 * m2 * sin(q2) - cos(q2) * lmy3 ^ 2 * m3 * sin(q2) + cos(q2) * lmz2 ^ 2 * m2 * sin(q2) + cos(q2) * lmz3 ^ 2 * m3 * sin(q2)) * dq1;
c22 = (-cos(q3) * lmx3 ^ 2 * m3 * sin(q3) + cos(q3) * lmy3 ^ 2 * m3 * sin(q3) + sin(q3) ^ 2 * lmx3 * lmy3 * m3 - cos(q3) ^ 2 * lmx3 * lmy3 * m3 + I3x * cos(q3) * sin(q3) - I3y * cos(q3) * sin(q3)) * dq3;
c23 = lmz3 * m3 * (-sin(q3) * lmy3 + cos(q3) * lmx3) * dq3 + (-cos(q3) * lmx3 ^ 2 * m3 * sin(q3) + cos(q3) * lmy3 ^ 2 * m3 * sin(q3) + sin(q3) ^ 2 * lmx3 * lmy3 * m3 - cos(q3) ^ 2 * lmx3 * lmy3 * m3 + I3x * cos(q3) * sin(q3) - I3y * cos(q3) * sin(q3)) * dq2 + (-0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) - cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + sin(q3) * sin(q2) * lmy3 * lmz3 * m3 - cos(q3) * sin(q2) * lmx3 * lmz3 * m3 + I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1 + cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 + cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 + I3z * cos(q2) / 0.2e1) * dq1;
c31 = (cos(q3) * sin(q2) * lmx3 * lmz3 * m3 - sin(q3) * sin(q2) * lmy3 * lmz3 * m3 - cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 - I3z * cos(q2) / 0.2e1 + 0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) + cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1) * dq2 + (cos(q2) ^ 2 * sin(q3) ^ 2 * lmx3 * lmy3 * m3 - cos(q2) ^ 2 * cos(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q2) * sin(q3) * sin(q2) * lmx3 * lmz3 * m3 + cos(q2) * cos(q3) * sin(q2) * lmy3 * lmz3 * m3 - cos(q2) ^ 2 * cos(q3) * lmx3 ^ 2 * m3 * sin(q3) + cos(q2) ^ 2 * cos(q3) * lmy3 ^ 2 * m3 * sin(q3) + cos(q2) ^ 2 * cos(q3) * I3x * sin(q3) - I3y * cos(q2) ^ 2 * cos(q3) * sin(q3)) * dq1;
c32 = (cos(q3) * lmx3 ^ 2 * m3 * sin(q3) - cos(q3) * lmy3 ^ 2 * m3 * sin(q3) - sin(q3) ^ 2 * lmx3 * lmy3 * m3 + cos(q3) ^ 2 * lmx3 * lmy3 * m3 - I3x * cos(q3) * sin(q3) + I3y * cos(q3) * sin(q3)) * dq2 + (cos(q3) * sin(q2) * lmx3 * lmz3 * m3 - sin(q3) * sin(q2) * lmy3 * lmz3 * m3 - cos(q2) * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * lmy3 ^ 2 * m3 / 0.2e1 - I3z * cos(q2) / 0.2e1 + 0.2e1 * cos(q2) * cos(q3) * lmx3 * lmy3 * m3 * sin(q3) + cos(q2) * sin(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * cos(q3) ^ 2 * lmx3 ^ 2 * m3 / 0.2e1 - cos(q2) * sin(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 + cos(q2) * cos(q3) ^ 2 * lmy3 ^ 2 * m3 / 0.2e1 - I3x * cos(q2) * sin(q3) ^ 2 / 0.2e1 + I3x * cos(q2) * cos(q3) ^ 2 / 0.2e1 + I3y * cos(q2) * sin(q3) ^ 2 / 0.2e1 - I3y * cos(q2) * cos(q3) ^ 2 / 0.2e1) * dq1;
c33 = 0;

C = [c11, c12, c13; c21, c22, c23; c31, c32, c33];



